<?php

namespace AppBundle\Entity;

use JsonSerializable;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;


/**
 * Sentence
 *
 * @ORM\Table(name="sentence")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\SentenceRepository")
 */
class Sentence implements JsonSerializable
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="sentence", type="string", length=150, nullable=false)
	 * @Assert\NotBlank()
	 * @Assert\Length(max=150)
     */
    private $sentence;

	/**
     * @var string
     *
     * @ORM\Column(name="translation", type="string", length=150, nullable=false)
     * @Assert\NotBlank()
	 * @Assert\Length(max=150)
     */
    private $translation;

	/**
     * @var string
     *
     * @ORM\Column(name="phonetic", type="string", length=180, nullable=true)
	 * @Assert\Length(max=180)
     */
    private $phonetic;



	// Linked Tables
	// -------------------------------------------------------------------------

    /**
     * @ORM\OneToOne(targetEntity="File", inversedBy="sentence", cascade={"persist"})
     * @ORM\JoinColumn(name="soundId", referencedColumnName="id", onDelete="CASCADE")
     */
    private $sound;

    /**
     * @ORM\ManyToOne(targetEntity="Vocabulary", inversedBy="examples", cascade={"persist"})
     * @ORM\JoinColumn(name="vocabularyId", referencedColumnName="id", nullable=true)
     */
    private $vocabulary;

	// Custom methods
	// -------------------------------------------------------------------------

    public function jsonSerialize()
    {
        return array(
            'sentence' => $this->sentence,
            'translation' => $this->getTranslation(),
            'phonetic' => $this->getPhonetic(),
            'sound' => $this->getSound() == null ? null : $this->getSound()->jsonSerialize()
        );
    }

	// Automatic methods
	// -------------------------------------------------------------------------



}
